---
- name: Deploy PostgreSQL Backup Solution
  hosts: k8s_master
  become: false
  vars_files:
    - ./group_vars/all/postgres-backup-vault.yml
  vars:
    kube_config_dir: "/home/{{ ansible_user }}/.kube"
    postgres_backup:
      namespace: backup
      postgres_db: "all" #
      postgres_host: "postgres-db.database.svc.cluster.local"
      postgres_port: "5432"
      postgres_user: "postgres"
      postgres_db_password: "{{ postgres_password }}"
      s3_access_key: "{{ vault_s3_access_key }}"
      s3_secret_key: "{{ vault_s3_secret_key }}"
      s3_bucket: "{{ vault_s3_bucket }}"
      s3_endpoint: "{{ vault_s3_endpoint }}"
      s3_prefix: "{{ vault_s3_prefix }}"
      schedule: "0 0 * * *" # Daily at midnight

  tasks:
    - name: Create temporary directory for manifests
      file:
        path: /tmp/postgres-backup
        state: directory
        mode: "0755"

    - name: Create PostgreSQL backup manifest
      copy:
        dest: /tmp/postgres-backup/postgres-backup.yml
        content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{ postgres_backup.namespace }}
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgresql
            namespace: {{ postgres_backup.namespace }}
          spec:
            selector:
              matchLabels:
                app: postgresql
            strategy:
              type: Recreate
            template:
              metadata:
                labels:
                  app: postgresql
              spec:
                containers:
                - name: postgresql
                  image: itbm/postgresql-backup-s3
                  imagePullPolicy: Always
                  env:
                  - name: POSTGRES_DATABASE
                    value: "{{ postgres_backup.postgres_db }}"
                  - name: POSTGRES_HOST
                    value: "{{ postgres_backup.postgres_host }}"
                  - name: POSTGRES_PORT
                    value: "{{ postgres_backup.postgres_port }}"
                  - name: POSTGRES_PASSWORD
                    value: "{{ postgres_backup.postgres_db_password }}"
                  - name: POSTGRES_USER
                    value: "{{ postgres_backup.postgres_user }}"
                  - name: S3_ACCESS_KEY_ID
                    value: "{{ postgres_backup.s3_access_key }}"
                  - name: S3_SECRET_ACCESS_KEY
                    value: "{{ postgres_backup.s3_secret_key }}"
                  - name: S3_BUCKET
                    value: "{{ postgres_backup.s3_bucket }}"
                  - name: S3_ENDPOINT
                    value: "{{ postgres_backup.s3_endpoint }}"
                  - name: S3_PREFIX
                    value: "{{ postgres_backup.s3_prefix }}"
                  - name: SCHEDULE
                    value: "{{ postgres_backup.schedule }}"

    - name: Apply PostgreSQL backup manifest
      command: kubectl apply -f /tmp/postgres-backup/postgres-backup.yml
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: backup_deployment
      changed_when: backup_deployment.rc == 0

    - name: Wait for backup deployment to be ready
      command: >
        kubectl -n {{ postgres_backup.namespace }} wait deployment/postgresql
        --for=condition=Available=True
        --timeout=300s
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: wait_result
      changed_when: false

    - name: Get deployment status
      command: kubectl -n {{ postgres_backup.namespace }} get deployment postgresql -o wide
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: deployment_status
      changed_when: false

    - name: Display deployment status
      debug:
        var: deployment_status.stdout_lines

    - name: Clean up temporary files
      file:
        path: /tmp/postgres-backup
        state: absent
